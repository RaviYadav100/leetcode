------------------------------------------------------// Sort an Array //----------------------------------------------------------------------

Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

 

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).
Example 2:

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessarily unique.
 

Constraints:

1 <= nums.length <= 5 * 104
-5 * 104 <= nums[i] <= 5 * 104

---------------------------------------------------------------------------// Solution //----------------------------------------------------------

class Solution {
public:
    void merge(vector<int>& nums,int start,int mid,int end){
        int i=start;
        int j=mid+1;
        int k=0;
        vector<int> arr(end-start+1);
        while(i<=mid&&j<=end){
            if(nums[i]<=nums[j]){
                arr[k++]=nums[i++];
            }else{
                arr[k++]=nums[j++];
            }
        }
        while(i<=mid){
            arr[k++]=nums[i++];
        }
        while(j<=end){
            arr[k++]=nums[j++];
        }
        for(int i=start,j=0;i<=end;i++,j++){
            nums[i]=arr[j];
        }
    }
    void divide(vector<int>&nums,int start,int end){
        
        if(start>=end)return; 
        int mid=start+(end-start)/2;
        divide(nums,start,mid);
        divide(nums,mid+1,end);
        merge(nums,start,mid,end);
    }
     vector<int> sortArray(vector<int>& nums) {
        divide(nums, 0, nums.size() - 1);
        return nums;  
    }

};
